#!/bin/bash
# Copyright (c) 2013 Jakub Suder, licensed under MIT license
# version: 2013-03-05
# http://github.com/jsuder/git-code-review

usage() {
  echo "usage: git code-review [options]"
  echo ""
  echo "  -n   dry run - prints changes but doesn't update any files"
  echo "  -h   prints this help"
  echo ""
}

while getopts "nh" OPTION; do
  case $OPTION in
    h)
      usage
      exit 1
      ;;
    n)
      DRY_RUN=1
      ;;
  esac
done

REPO=$(git rev-parse --show-toplevel)
REVIEW_DIR="$REPO/.git/review"

if [ -z "$REPO" ]; then
  exit 1
fi

echo "Fetching latest updates..."
git fetch

# make sure .git/review even exists
if [ ! -e "$REVIEW_DIR" ]; then
  mkdir "$REVIEW_DIR"
fi

# get all currently existing remote branches
REMOTE_BRANCHES=$(git branch -r | grep -v " ->")

for BRANCH in $REMOTE_BRANCHES; do
  NEW_HASH=$(git rev-parse --short $BRANCH)
  HASH_FILE="$REVIEW_DIR/$BRANCH"
  REMOTE=$(echo $BRANCH | cut -d '/' -f 1)
  ORIGIN_URL=$(git config --get remote.$REMOTE.url)
  GITHUB_URL=$(echo "$ORIGIN_URL" | grep -E -o 'github.com[:/].*' | sed -e 's/:/\//' -e 's/\.git$//')

  # find the main branch for compare links
  if [ $(git rev-parse -q --verify $REMOTE/develop) ]; then
    MAIN_BRANCH=develop
  elif [ $(git rev-parse -q --verify $REMOTE/master) ]; then
    MAIN_BRANCH=master
  fi

  if [ -e "$HASH_FILE" ]; then
    # branch existed before, print revisions
    OLD_HASH=$(cat "$HASH_FILE")

    if [ $OLD_HASH != $NEW_HASH ]; then
      echo

      if [ "$(git branch -r --contains $OLD_HASH | grep -v " ->" | grep "$BRANCH$")" ]; then
        echo "Branch $BRANCH updated: $OLD_HASH..$NEW_HASH"

        if [ "$GITHUB_URL" ]; then
          echo " -> https://$GITHUB_URL/compare/$OLD_HASH...$NEW_HASH"
        fi
      else
        echo "Branch $BRANCH was rebased, I'm confused... ($OLD_HASH -> $NEW_HASH)"

        if [ "$MAIN_BRANCH" ] && [ "$GITHUB_URL" ]; then
          echo " -> https://$GITHUB_URL/compare/$MAIN_BRANCH...$NEW_HASH"
        fi
      fi

      FOUND=1
    fi
  else
    # new branch created - prepare parent directories
    DIR=$(dirname "$HASH_FILE")
    mkdir -p "$DIR"

    if [ "$MAIN_BRANCH" ]; then
      if [ ! "$(git branch -r --contains $NEW_HASH | grep -v " ->" | grep "$REMOTE/$MAIN_BRANCH$")" ]; then
        echo
        echo "Branch $BRANCH created: $REMOTE/$MAIN_BRANCH..$NEW_HASH"

        if [ "$GITHUB_URL" ]; then
          echo " -> https://$GITHUB_URL/compare/$MAIN_BRANCH...$NEW_HASH"
        fi

        FOUND=1
      fi
    else
      echo
      echo "Branch $BRANCH created: $NEW_HASH"

      FOUND=1
    fi
  fi

  if [ -z "$DRY_RUN" ]; then
    # update saved revision
    echo $NEW_HASH > "$HASH_FILE"
  fi
done

# check old branches
EXISTING_BRANCHES=$(find "$REVIEW_DIR/" -type f -and -not -name '.*' | sed -E -e 's/.*\.git\/review\/+//')

for BRANCH in $EXISTING_BRANCHES; do
  if [[ "$REMOTE_BRANCHES" != *$BRANCH* ]]; then
    HASH_FILE="$REVIEW_DIR/$BRANCH"
    OLD_HASH=$(cat "$HASH_FILE")

    echo "Branch $BRANCH removed (was: $OLD_HASH)"

    if [ -z "$DRY_RUN" ]; then
      rm "$HASH_FILE"
    fi
  fi
done

if [ -z "$FOUND" ]; then
  echo "Nothing to review, back to work!"
fi
